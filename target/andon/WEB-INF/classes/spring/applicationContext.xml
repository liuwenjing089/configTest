<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="  
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd  
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!-- 自动扫描 类包 -->
	<context:component-scan base-package="com.andon" />

	<!-- 注入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:properties/jdbc.properties</value>
			</list>
		</property>
	</bean>
	  <!-- 国际化资源文件 用到的时候需要修改,如果配置于springMVC。xml文件中，filter将无法使用 国际化方法 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:properties/ExceptionMessage</value>
			</list>
		</property>
		<property name="fileEncodings" value="utf-8" />
		<property name="cacheSeconds" value="120" />
	</bean>

	<!-- 设置数据源信息 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${database.driverClassName}"></property>
		<property name="url" value="${database.url}"></property>
		<property name="username" value="${database.username}"></property>
		<property name="password" value="${database.password}"></property>
		<!-- <property name="initialSize" value="30" />
		<property name="maxActive" value="100"></property>
		<property name="minIdle" value="50" />
		<property name="maxIdle" value="100"></property>
		<property name="maxWait" value="60000"></property> -->
		<!--initialSize: 初始化连接-->  
		<property name="initialSize" value="10"/>  
		<!--maxActive: 最大连接数量-->  
		<property name="maxActive" value="48"/>
		<!--maxIdle: 最大空闲连接-->  
		<property name="maxIdle" value="20"/>  
		<!--minIdle: 最小空闲连接-->  
		<property name="minIdle" value="10"/>  
        <!--removeAbandoned: 是否自动回收超时连接-->  
		<property name="removeAbandoned" value="true"/>  
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->  
		<property name="removeAbandonedTimeout" value="360"/>  
		<!--maxWait: 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒-->  
		<property name="maxWait" value="6000"/>
		<!-- 默认值是false,当连接池中的空闲连接是否有效 -->
		<property name="testWhileIdle" value="true" />
		 <!-- 默认值是true，当从连接池取连接时，验证这个连接是否有效 -->
        <property name="testOnBorrow" value="true"/> 
        <!--  默认值是flase,当从把该连接放回到连接池的时，验证这个连接是否有效--> 
        <property name="testOnReturn" value="true" />
        <!-- 一条sql语句，用来验证数据库连接是否正常。这条语句必须是一个查询模式，并至少返回一条数据。可以为任何可以验证数据库连接是否正常的sql. -->
        <property name="validationQuery" value="select 1"/> 
	</bean>

	<!-- 配置SpringMVC的视图解析器 -->
<!--     <bean id="htmlViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">	
		<property name="prefix" value="/html/"/>
		<property name="suffix" value=".html"/>		
		<property name="contentType" value="text/html;charset=utf-8"/>
		<property name="order" value="0"/>
	</bean> -->
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapper.xml文件 -->
		<property name="mapperLocations" value="classpath:com/andon/mapper/*.xml" />
	</bean>

	<!-- 设置MyBatis的SessionFactory -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource" /> <property name="configLocation" 
		value="classpath:sqlMapConfig.xml" /> </bean> -->

	<!-- Mapper接口扫描包路径 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.andon.dao"></property>
	</bean>

	<!-- 事务管理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation开启 -->
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />

</beans>  